{{~#withInterfaces~}}
{{~#operations}}
/**
 * {{classname}} - object-oriented interface
{{~#description}}
 * {{{description}}}
{{~/description}}
 */
export interface {{classname}}Interface {
{{~#operation}}
    /**
     *
     {{~#summary}}
     * @summary {{summary}}
     {{~/summary}}
     * @param {*} [params] Request parameters, including pathParams, queryParams (including bodyParams) and http options.
     * @throws {HttpError}
     * @memberof {{classname}}
     */
    {{nickname}}({{#hasParams}}params?: { {{~#pathParams.0}}
        pathParams: { {{#pathParams}}{{paramName}}{{^required}}?{{/required}}: {{{dataType}}}{{#unless @last}}, {{/unless}}{{/pathParams}} };{{/pathParams.0}}{{#queryParams.0}}
        queryParams?: { {{#queryParams}}{{baseName}}{{^required}}?{{/required}}: {{{dataType}}}, {{/queryParams}} };{{/queryParams.0}}{{#bodyParam}}
        {{paramName}}{{^required}}?{{/required}}: {{{dataType}}};{{/bodyParam}}{{#hasFormParams}}
        formParams: { {{#formParams}}{{paramName}}:{{{dataType}}};{{/formParams}} }{{/hasFormParams}}
    }{{/hasParams}}): {{#if returnType}}Promise<{{{returnType}}}>{{else}}Promise<void>{{/if}};
{{~/operation}}
}
{{/operations}}{{~/withInterfaces}}
{{~#operations}}
/**
 * {{classname}} - object-oriented interface{{#description}}
 * {{{description}}}{{/description}}
 */
{{~#withInterfaces}}
export class {{classname}} extends BaseAPI implements {{classname}}Interface {
{{~/withInterfaces}}
{{~^withInterfaces}}
export class {{classname}} extends BaseAPI {
{{~/withInterfaces}}
{{~#operation}}
    /**
     *
     {{~#summary}}
     * @summary {{&summary}}
     {{~/summary}}
     * @param {*} [params] Request parameters, including pathParams, queryParams (including bodyParams) and http options.
     * @throws {HttpError}
     */
    public async {{nickname}}({{#hasParams}}params{{^allParams}}?{{/allParams}}: { {{~#pathParams.0}}
        pathParams: { {{#pathParams}}{{paramName}}{{^required}}?{{/required}}: {{{dataType}}}{{#unless @last}}, {{/unless}}{{/pathParams}} };{{/pathParams.0}}{{#queryParams.0}}
        queryParams?: { {{#queryParams}}{{baseName}}{{^required}}?{{/required}}: {{{dataType}}}, {{/queryParams}} };{{/queryParams.0}}{{#bodyParam}}
        {{paramName}}{{^required}}?{{/required}}: {{{dataType}}};{{/bodyParam}}{{#hasFormParams}}
        formParams: { {{#formParams}}{{paramName}}:{{{dataType}}}, {{/formParams}} }{{/hasFormParams}}
    }{{/hasParams}}): {{#if returnType}}Promise<{{{returnType}}}>{{else if isResponseFile}}Promise<Blob>{{else}}Promise<void>{{/if}} {
        {{~#if isResponseFile}}
        const response = await this.{{httpMethod}}(
            {{#if pathParams}}this.path("{{{path}}}", params.pathParams){{else}}"{{{path}}}"{{/if}},
            {{#if queryParams}}params && params.queryParams{{else}}{}{{/if}},
            {{~#if bodyParam}}
            { body: params.{{bodyParam.paramName}}, contentType: {{^consumes}}"application/json"{{/consumes}}{{#consumes}}"{{{mediaType}}}"{{/consumes}} }
            {{~else if hasFormParams}}
            { body: params.formParams, contentType: "application/x-www-form-urlencoded" }
            {{~/if}}
        );
        return await response.blob();
        {{~else}}
        return await this.{{httpMethod}}(
            {{#if pathParams}}this.path("{{{path}}}", params.pathParams){{else}}"{{{path}}}"{{/if}},
            {{#if queryParams}}params && params.queryParams{{else}}{}{{/if}},
            {{~#if bodyParam}}
            { body: params.{{bodyParam.paramName}}, contentType: {{^consumes}}"application/json"{{/consumes}}{{#consumes}}"{{{mediaType}}}"{{/consumes}} }
            {{~else if hasFormParams}}
            { body: params.formParams, contentType: "application/x-www-form-urlencoded" }
            {{~/if}}
        );
        {{~/if}}
    }
{{~/operation}}
}
{{~/operations}}