{{~#withInterfaces~}}
{{~#operations}}
/**
 * {{classname}} - object-oriented interface
{{~#if description}}
 * {{{description}}}
{{~/if}}
 */
export interface {{classname}}Interface {
{{~#operation}}
    /**
     *
     {{~#if summary}}
     * @summary {{summary}}
     {{~/if}}
     * @param {*} [params] Request parameters, including pathParams, queryParams (including bodyParams) and http options.
     * @throws {HttpError}
     * @memberof {{classname}}
     */
    {{nickname}}({{#if hasParams}}params: { {{~#if pathParams.0}}
        pathParams: { {{#pathParams}}{{paramName}}{{^required}}?{{/required}}: {{{dataType}}}{{#unless @last}}, {{/unless}}{{/pathParams}} };{{/if}}{{#if queryParams.0}}
        queryParams?: { {{#queryParams}}{{baseName}}{{^required}}?{{/required}}: {{{dataType}}}, {{/queryParams}} };{{/if}}{{#if bodyParam}}{{#bodyParam}}
        {{paramName}}{{^required}}?{{/required}}: {{{dataType}}};{{/bodyParam}}{{/if}}{{#hasFormParams}}
        formParams: { {{#formParams}}{{paramName}}: {{#if isFile}}Blob{{else}}{{{dataType}}}{{/if}}; {{/formParams~}} }{{/hasFormParams}}{{#hasHeaderParams}}
        headers: { {{#headerParams}}"{{baseName}}": string{{#unless @last}},{{/unless}} {{/headerParams~}}};{{/hasHeaderParams}}{{#if authMethods}}{{#authMethods}}{{#if @first}}
        security: {{/if}}{{#if (eq scheme 'none')}}undefined{{else}}{{name}}{{/if}}{{#if @last}};{{else}} | {{/if}}{{/authMethods}}{{/if}}
    }{{else if hasAuthMethods}}params: {
        security: {{#authMethods}}{{#if @first}}{{name}};{{/if}}{{/authMethods}}
    }{{/if}}): {{#if isResponseFile}}Promise<Blob>{{else if returnType}}Promise<{{{returnType}}}>{{else}}Promise<void>{{/if}};
{{~/operation}}
}
{{/operations}}{{~/withInterfaces}}
{{~#operations}}
/**
 * {{classname}} - object-oriented interface{{#if description}}
 * {{{description}}}{{/if}}
 */
{{~#withInterfaces}}
export class {{classname}} extends BaseAPI implements {{classname}}Interface {
{{~/withInterfaces}}
{{~^withInterfaces}}
export class {{classname}} extends BaseAPI {
{{~/withInterfaces}}
{{~#operation}}
    /**
     *
     {{~#if summary}}
     * @summary {{&summary}}
     {{~/if}}
     * @param {*} [params] Request parameters, including pathParams, queryParams (including bodyParams) and http options.
     * @throws {HttpError}
     */
    public async {{nickname}}({{#if hasParams}}params{{^allParams}}?{{/allParams}}: { {{~#if pathParams.0}}
        pathParams: { {{#pathParams}}{{paramName}}{{^required}}?{{/required}}: {{{dataType}}}{{#unless @last}}, {{/unless}}{{/pathParams}} };{{/if}}{{#if queryParams.0}}
        queryParams?: { {{#queryParams}}{{baseName}}{{^required}}?{{/required}}: {{{dataType}}}, {{/queryParams}} };{{/if}}{{#if bodyParam}}{{#bodyParam}}
        {{paramName}}{{^required}}?{{/required}}: {{{dataType}}};{{/bodyParam}}{{/if}}{{#hasFormParams}}
        formParams: { {{#formParams}}{{paramName}}: {{#if isFile}}Blob{{else}}{{{dataType}}}{{/if}}; {{/formParams~}} }{{/hasFormParams}}{{#hasHeaderParams}}
        headers: { {{#headerParams}}"{{baseName}}": string{{#unless @last}},{{/unless}} {{/headerParams~}} };{{/hasHeaderParams}}{{#if authMethods}}{{#authMethods}}{{#if @first}}
        security: {{/if}}{{#if (eq scheme 'none')}}undefined{{else}}{{name}}{{/if}}{{#if @last}};{{else}} | {{/if}}{{/authMethods}}{{/if}}
    }{{else if hasAuthMethods}}params: {
        security: {{#authMethods}}{{#if @first}}{{name}};{{/if}}{{/authMethods}}
    }{{/if}}): {{#if isResponseFile}}Promise<Blob>{{else if returnType}}Promise<{{{returnType}}}>{{else}}Promise<void>{{/if}} {
        {{~#if isResponseFile}}
        const response: Response = await this.{{httpMethod}}(
            {{#if pathParams}}this.path("{{{path}}}", params.pathParams){{else}}"{{{path}}}"{{/if}},
            {{#if queryParams}}params && params.queryParams{{else}}{}{{/if}},
            {{~#if bodyParam}}
            { body: params.{{bodyParam.paramName}}, contentType: {{^consumes}}"application/json"{{/consumes}}{{#consumes}}{{#if @first}}"{{{mediaType}}}"{{/if}}{{/consumes}} }
            {{~else if hasFormParams}}
            { body: params.formParams, contentType: "application/x-www-form-urlencoded" }
            {{~else}}
            undefined
            {{~/if}},
            { {{~#hasHeaderParams}}
                ...params.headers,{{/hasHeaderParams}}{{#hasAuthMethods}}
                ...params.security?.headers(),{{/hasAuthMethods}}
            }
        );
        return await response.blob();
        {{~else}}
        return await this.{{httpMethod}}(
            {{#if pathParams}}this.path("{{{path}}}", params.pathParams){{else}}"{{{path}}}"{{/if}},
            {{#if queryParams}}params && params.queryParams{{else}}{}{{/if}},
            {{~#if bodyParam}}
            { body: params.{{bodyParam.paramName}}, contentType: {{^consumes}}"application/json"{{/consumes}}{{#consumes}}{{#if @first}}"{{{mediaType}}}"{{/if}}{{/consumes}} }
            {{~else if hasFormParams}}
            { body: params.formParams, contentType: "application/x-www-form-urlencoded" }
            {{~else}}
            undefined
            {{~/if}},
            { {{~#hasHeaderParams}}
                ...params.headers,{{/hasHeaderParams}}{{#hasAuthMethods}}
                ...params.security?.headers(),{{/hasAuthMethods}}
            }
        );
        {{~/if}}
    }
{{~/operation}}
}
{{~/operations}}