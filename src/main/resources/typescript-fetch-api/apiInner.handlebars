{{~#withInterfaces~}}
{{~#operations~}}
/**
 * {{classname}} - object-oriented interface
{{~#description}}
 * {{{description}}}
{{~/description}}
 * @export
 * @class {{classname}}Interface
 * @extends {BaseAPI}
 */
export interface {{classname}}Interface {
{{~#operation}}
    /**
     * {{&notes}}
     {{~#summary}}
     * @summary {{summary}}
     {{~/summary}}
     * @param {*} [params] Request parameters, including pathParams, queryParams (including bodyParams) and http options.
     * @throws {HttpError}
     * @memberof {{classname}}
     */
    {{nickname}}(params?: { {{#pathParams.0}}
          pathParams: { {{#pathParams}}{{paramName}}{{^required}}?{{/required}}: {{{dataType}}}, {{/pathParams}} },{{/pathParams.0}}{{#queryParams.0}}
          queryParams?: { {{#queryParams}}{{baseName}}{{^required}}?{{/required}}: {{{dataType}}}, {{/queryParams}} },{{/queryParams.0}}{{#bodyParam}}
          {{paramName}}{{^required}}?{{/required}}: {{{dataType}}},{{/bodyParam}}{{#hasFormParams}}
          formParams: { {{#formParams}}{{paramName}}:{{{dataType}}}, {{/formParams}} }, {{/hasFormParams}}
          options?: any
    }): {{#if returnType}}Promise<{{{returnType}}}>{{else}}Promise<void>{{/if}};
{{~/operation}}
}
{{/operations}}{{/withInterfaces}}
{{#operations}}
/**
 * {{classname}} - object-oriented interface{{#description}}
 * {{{description}}}{{/description}}
 * @export
 * @class {{classname}}
 * @extends {BaseAPI}
 */
{{~#withInterfaces}}
export class {{classname}} extends BaseAPI implements {{classname}}Interface {
{{~/withInterfaces}}
{{~^withInterfaces}}
export class {{classname}} extends BaseAPI {
{{~/withInterfaces}}
{{~#operation}}
    /**
     * {{&notes}}
     {{~#summary}}
     * @summary {{&summary}}
     {{~/summary}}
     * @param {*} [params] Request parameters, including pathParams, queryParams (including bodyParams) and http options.
     * @throws {HttpError}
     * @memberof {{classname}}
     */
    public async {{nickname}}(params{{^allParams}}?{{/allParams}}: { {{#pathParams.0}}
          pathParams: { {{#pathParams}}{{paramName}}{{^required}}?{{/required}}: {{{dataType}}}, {{/pathParams}} },{{/pathParams.0}}{{#queryParams.0}}
          queryParams?: { {{#queryParams}}{{baseName}}{{^required}}?{{/required}}: {{{dataType}}}, {{/queryParams}} },{{/queryParams.0}}{{#bodyParam}}
          {{paramName}}{{^required}}?{{/required}}: {{{dataType}}},{{/bodyParam}}{{#hasFormParams}}
          formParams: { {{#formParams}}{{paramName}}:{{{dataType}}}, {{/formParams}} }, {{/hasFormParams}}
          options?: any
    }): {{#if returnType}}Promise<{{{returnType}}}>{{else}}Promise<void>{{/if}} {
        return await this.{{httpMethod}}(
            {{#if pathParams}}this.path("{{{path}}}", params.pathParams){{else}}"{{{path}}}"{{/if}},
            {{#if queryParams}}params && params.queryParams{{else}}{}{{/if}},
            {{~#if bodyParam}}
            { body: params.{{bodyParam.paramName}}, contentType: {{^consumes}}"application/json"{{/consumes}}{{#consumes}}"{{{mediaType}}}"{{/consumes}} },
            {{~else if hasFormParams}}
            { body: params.formParams, contentType: "application/x-www-form-urlencoded" },
            {{~else}}
            undefined,
            {{~/if}}
            params && params.options,
        );
    }
{{/operation}}
}
{{~/operations}}

{{#withInterfaces}}{{#operations}}
export function mock{{classname}}(operations: {
    {{~#operation}}
        {{nickname}}?: () => {{#if returnType}}Promise<{{{returnType}}}>{{else}}Promise<void>{{/if}}
    {{~/operation}}
}): {{classname}}Interface {
    const reject = (operation: string) => () => Promise.reject(new Error("Unexpected function call " + operation));
    return {
    {{~#operation}}
        {{nickname}}: (operations.{{nickname}} || reject("{{nickname}}")),
    {{~/operation}}
    };
}


{{/operations}}{{/withInterfaces}}