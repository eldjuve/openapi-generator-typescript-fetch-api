
export class Random {
    seed: number;
    constructor(seed: number) {
        this.seed = seed % 2147483647;
        if (this.seed <= 0) this.seed += 2147483646;
    }

    next(): number {
        this.seed = this.seed * 16807 % 2147483647;
        return this.seed;
    }

    nextFloat(): number {
        return (this.next() - 1) / 2147483646;
    }

    nextInt(limit: number): number {
        return this.next() % limit;
    }

    nextnumber(limit: number): number {
        return this.next() % limit;
    }

    nextBoolean() {
        return this.nextInt(2) == 0;
    }

    pickOne<T>(options: Array<T>): T {
        return options[this.nextInt(options.length)];
    }

    pickSome<T>(options: Array<T>, n?: number): T[] {
        var shuffled = options.sort(() => (.5 - this.next()));
        return shuffled.slice(0, n||this.nextInt(options.length));
    }

    uuidv4() {
        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {
            var r = this.nextInt(16) | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
            return v.toString(16);
        });
    }
}



type Factory<T> = {
    [P in keyof T]?: ((sampleData: TestSampleData) => T[P])|T[P];
};

export interface SampleModelFactories {
{{#models}}
{{#model}}
    {{classname}}?: Factory<{{classname}}> | ((testData: TestSampleData) => {{classname}});
{{/model}}
{{/models}}
}

export interface SamplePropertyValues {
    [key: string]: (sampleData: TestSampleData) => any;
}

export interface TestData {
    seed?: number;
    sampleModelProperties?: SampleModelFactories;
    samplePropertyValues?: SamplePropertyValues;
    now?: Date;
}

export interface PropertyDefinition {
    containerClass: string;
    propertyName: string;
    example?: string|null|Array<any>;
    isNullable?: boolean;
}

export class TestSampleData {
    random: Random;
    sampleModelProperties: any;
    samplePropertyValues: SamplePropertyValues;
    now: Date;

    constructor({seed, sampleModelProperties, samplePropertyValues, now}: TestData) {
        this.random = new Random(seed || 100);
        this.now = now || new Date(2019, 1, seed);
        this.sampleModelProperties = sampleModelProperties || {};
        this.samplePropertyValues = samplePropertyValues || {};
    }

    nextFloat() { return this.random.nextFloat(); }

    nextInt(limit: number) { return this.random.nextInt(limit); }

    nextBoolean() { return this.random.nextBoolean(); }

    sampleboolean() { return this.random.nextBoolean(); }

    pickOne<T>(options: Array<T>) { return this.random.pickOne(options); }

    pickSome<T>(options: Array<T>) { return this.random.pickSome(options); }

    uuidv4() { return this.random.uuidv4(); }

    randomArray(generator: (n: number) => any, length?: number) {
        return Array.from({length: length || this.nextInt(3) + 1}).map((_, index) => generator(index));
    }

    randomEmail() {
        return this.randomFirstName().toLowerCase() +
            "." + this.randomLastName().toLowerCase() +
            "@" + this.randomDomain();
    }

    randomFirstName() {
        return this.pickOne(["James", "Mary", "John", "Patricia", "Robert", "Jennifer", "Michael", "Linda"]);
    }

    randomLastName() {
        return this.pickOne(["Smith", "Williams", "Johnson", "Jones", "Brown", "Davis", "Miller", "Wilson"]);
    }

    randomDomain() {
        return this.pickOne(["a", "b", "c", "d", "e"]) + ".example." + this.pickOne(["net", "com", "org"]);
    }

    randomPastDateTime(now: Date) {
        return new Date((now.getTime() - this.nextInt(4*7*24*60*60*1000)));
    }

    sampleDateTime() {
        return this.randomPastDateTime(this.now);
    }

    samplenumber() {
        return this.nextInt(10000);
    }

    sampleDate() {
        return this.randomPastDateTime(this.now);
    }

    sampleString(dataFormat?: string, example?: string): string {
        if (dataFormat === "uuid") {
            return this.uuidv4();
        }
        if (dataFormat === "uri") {
            return "https://" + this.randomDomain() + "/" + this.randomFirstName().toLowerCase();
        }
        if (dataFormat === "email") {
            return this.randomEmail();
        }
        if (example && example !== "null") return example;
        return "foo";
    }

    sampleArrayString(length?: number): Array<string> {
        return Array.from({length: length || this.arrayLength("string")}).map(() => this.sampleString());
    }

    generate(template?: ((sampleData: TestSampleData) => any)|any, propertyDefinition?: PropertyDefinition, generator?: () => any): any {
        if (template) {
           return typeof(template) === "function" ? template(this) : template;
        }
        if (propertyDefinition) {
            const {containerClass, propertyName, example} = propertyDefinition;
            if (this.sampleModelProperties[containerClass]) {
                const propertyFactory: Factory<any> = this.sampleModelProperties[containerClass][propertyName];
                if (propertyFactory && typeof(propertyFactory) === "function") {
                    return propertyFactory(this);
                } else if (propertyFactory) {
                    return propertyFactory;
                }
            }
            if (this.samplePropertyValues[propertyName]) {
                return this.samplePropertyValues[propertyName](this);
            }
            if (example && example !== "null") return example;
        }
        return generator && generator();
    }

    arrayLength(modelClass: string) {
        return this.nextInt(3) + 1;
    }

    sample(modelName: string): any {
        switch(modelName) {
{{#models}}
{{#model}}
{{^oneOf}}
            case "{{classname}}": return this.sample{{classname}}({});
            case "Array<{{classname}}>": return this.sampleArray{{classname}}({});
{{/oneOf}}
{{/model}}
{{/models}}
            default: throw new Error("Unknown type "+ modelName);
        }
    }

{{#models}}
{{#model}}
{{^oneOf}}
{{^discriminator}}
    sample{{classname}}({{^isEnum}}template: Factory<{{classname}}> = {}{{/isEnum}}): {{classname}} {
        const containerClass = "{{classname}}";
        if (typeof(this.sampleModelProperties[containerClass]) === "function") {
            return this.sampleModelProperties[containerClass](this);
        }
    {{#isEnum}}
        return this.pickOne([
        {{#allowableValues}}
            {{#enumVars}}
                {{classname}}.{{{name}}}{{^-last}},{{/-last}}
            {{/enumVars}}
        {{/allowableValues}}
        ]);
    {{/isEnum}}
    {{^isEnum}}
        return {
{{#allVars}}
{{#isString}}
{{^isEnum}}
            {{name}}: this.generate(template?.{{name}}, {containerClass, propertyName: "{{{name}}}", isNullable: {{isNullable}} }, () => this.sampleString("{{dataFormat}}"{{#example}}, "{{{example}}}"{{/example}})),
{{/isEnum}}
{{#isEnum}}
            {{name}}: this.generate(template?.{{name}}, {containerClass, propertyName: "{{{name}}}"{{#example}}, example: "{{example}}"{{/example}}{{^example}}undefined{{/example}}, isNullable: {{isNullable}} }, () => {{^isContainer}}this.pickOne([{{#allowableValues}}{{#enumVars}}{{datatypeWithEnum}}.{{{name}}}{{^-last}},{{/-last}}{{/enumVars}}{{/allowableValues}}]){{/isContainer}}{{#isContainer}}{{#mostInnerItems}}this.pickOne([{{#allowableValues}}{{#enumVars}}{{datatypeWithEnum}}.{{{name}}}{{^-last}},{{/-last}}{{/enumVars}}{{/allowableValues}}]){{/mostInnerItems}}{{/isContainer}}),
{{/isEnum}}
{{/isString}}
{{#isDateTime}}
            {{name}}: this.generate(template?.{{name}}, {containerClass, propertyName: "{{{name}}}", example: {{#example}}"{{{example}}}"{{/example}}{{^example}}undefined{{/example}}, isNullable: {{isNullable}} }, () => this.sampleDate()),
{{/isDateTime}}
{{^isString}}
{{^isDateTime}}
{{#isContainer}}
            {{name}}: this.generate(template?.{{name}}, {containerClass, propertyName: "{{{name}}}", example: {{#example}}{{{example}}}{{/example}}{{^example}}undefined{{/example}}, isNullable: {{isNullable}} }, () => {{#items}}{{#isString}}this.sampleArrayString{{/isString}}{{^isString}}this.sampleArray{{dataType}}{{/isString}}{{/items}}()),
{{/isContainer}}
{{^isContainer}}
            {{name}}: this.generate(template?.{{name}}, {containerClass, propertyName: "{{{name}}}", example: {{#example}}"{{{example}}}"{{/example}}{{^example}}undefined{{/example}}, isNullable: {{isNullable}} }, () => this.sample{{dataType}}()),
{{/isContainer}}
{{/isDateTime}}
{{/isString}}
{{/allVars}}
        };
    {{/isEnum}}
    }
{{/discriminator}}
{{#discriminator}}

    sample{{classname}}(template: Factory<{{classname}}> = {}): {{classname}} {
        return this.pickOne([{{#discriminator.mappedModels}}this.sample{{modelName}}{{^-last}}, {{/-last}}{{/discriminator.mappedModels}}])();
    }
{{/discriminator}}

    sampleArray{{classname}}({{^isEnum}}template: Factory<{{classname}}> = {},{{/isEnum}} length?: number): Array<{{classname}}> {
        return this.randomArray(() => this.sample{{classname}}({{^isEnum}}template{{/isEnum}}), length ?? this.arrayLength("{{classname}}"));
    }
{{/oneOf}}
{{/model}}
{{/models}}

}
