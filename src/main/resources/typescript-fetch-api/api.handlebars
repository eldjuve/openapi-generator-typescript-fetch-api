/* eslint @typescript-eslint/no-unused-vars: off */
{{>licenseInfo}}

import {
{{~#models}}
    {{~#model}}
    {{classname}},
    {{~/model}}
{{~/models}}
} from "./model";

import { BaseAPI, SecurityScheme } from "./base";

{{#withInterfaces~}}
export interface ApplicationApis {
{{~#apiInfo}}{{#apis}}
    {{classVarName}}Api: {{classname}}Interface;
{{~/apis}}{{/apiInfo}}
}
{{~/withInterfaces}}
{{#apiInfo}}{{#apis}}{{>apiInner}}{{/apis}}{{/apiInfo}}

type ServerNames =
{{~#servers}}
    | "{{#if description}}{{description}}{{else}}default{{/if}}"
{{~/servers}};

export const servers: Record<ServerNames, ApplicationApis> = {
{{~#servers}}
    {{#if description}}"{{description}}"{{else}}default{{/if}}: {
    {{~#apiInfo}}{{#apis}}
        {{classVarName}}Api: new {{classname}}("{{url}}"),
    {{~/apis}}{{/apiInfo}}
    },
{{~/servers}}
};

{{#if authMethods}}{{#authMethods}}
{{~#unless (eq scheme 'none')}}
export class {{name}} implements SecurityScheme {
{{~#if isBasicBearer}}
    constructor(private bearerToken: string) {}

    headers(): Record<string, string> {
        return {
            "Authorization": `Bearer ${this.bearerToken}`,
        }
    }
{{~else if isBasicBasic}}
    constructor(private basicAuthorization: string) {}

    headers(): Record<string, string> {
        return {
            "Authorization": `Basic ${this.basicAuthorization}`,
        }
    }
{{~else if isKeyInHeader}}
    constructor(private name: string) {}

    headers(): Record<string, string> {
        return {
            "Authorization": `Bearer ${this.name}`,
        }
    }
{{~else if isOAuth}}
    constructor(private bearerToken: string) {}

    headers(): Record<string, string> {
        return {
            "Authorization": `Bearer ${this.bearerToken}`,
        }
    }
{{~else}}
    constructor() {
        throw new Error("Unknown authorization scheme {{scheme}}");
    }
{{~/if}}
}
{{/unless~}}
{{/authMethods~}}{{/if}}