/* eslint @typescript-eslint/no-unused-vars: off */
/**
 * Open ID Connect
 * Open ID Connect Discovery
 *
 * The version of the OpenAPI document: 1.0.0-draft
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
    DiscoveryDocumentDto,
    JwksDocumentDto,
    JwksKeyDto,
    JwtHeaderDto,
    JwtPayloadDto,
    TokenResponseDto,
} from "./model";

import { BaseAPI, RequestCallOptions, SecurityScheme } from "./base";

export interface ApplicationApis {
    defaultApi: DefaultApiInterface;
}

/**
 * DefaultApi - object-oriented interface
 */
export interface DefaultApiInterface {
    /**
     *
     * @param {*} [params] Request parameters, including pathParams, queryParams (including bodyParams) and http options.
     * @throws {HttpError}
     */
    fetchToken(params: {
        formParams: { code: string; clientId: string; clientSecret: string; redirectUri: string; subjectToken: string; audience: string; }
        headers?: { "Authorization"?: string };
    } & RequestCallOptions): Promise<TokenResponseDto>;
    /**
     *
     * @throws {HttpError}
     */
    wellKnownKeysGet(params?: RequestCallOptions): Promise<JwksDocumentDto>;
    /**
     *
     * @throws {HttpError}
     */
    wellKnownOpenidConfigurationGet(params?: RequestCallOptions): Promise<DiscoveryDocumentDto>;
}

/**
 * DefaultApi - object-oriented interface
 */
export class DefaultApi extends BaseAPI implements DefaultApiInterface {
    /**
     *
     * @param {*} [params] Request parameters, including pathParams, queryParams (including bodyParams) and http options.
     * @throws {HttpError}
     */
    public async fetchToken(params: {
        formParams: { code: string; clientId: string; clientSecret: string; redirectUri: string; subjectToken: string; audience: string; }
        headers?: { "Authorization"?: string };
    } & RequestCallOptions): Promise<TokenResponseDto> {
        return await this.fetch(
            this.basePath + "/token",
            {
                ...params,
                method: "POST",
                body: this.formData(params.formParams),
                headers: {
                    ...this.removeEmpty(params.headers),
                    "Content-Type": "application/x-www-form-urlencoded",
                },
            }
        );
    }
    /**
     *
     * @throws {HttpError}
     */
    public async wellKnownKeysGet(params: RequestCallOptions = {}): Promise<JwksDocumentDto> {
        return await this.fetch(
            this.basePath + "/.well-known/keys", params
        );
    }
    /**
     *
     * @throws {HttpError}
     */
    public async wellKnownOpenidConfigurationGet(params: RequestCallOptions = {}): Promise<DiscoveryDocumentDto> {
        return await this.fetch(
            this.basePath + "/.well-known/openid-configuration", params
        );
    }
}

type ServerNames =
    | "default";

export const servers: Record<ServerNames, ApplicationApis> = {
    default: {
        defaultApi: new DefaultApi(""),
    },
};

