/* eslint @typescript-eslint/no-unused-vars: off */
/**
 * Infection Tracker
 * Infection Tracker - A case management system for tracking the spread of diseases
 *
 * The version of the OpenAPI document: 1.0.0-draft
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
    CaseWorkerDto,
    ExposureDto,
    InfectionDto,
    InfectionInformationDto,
    UserRoleDto,
} from "./model";

import { BaseAPI, SecurityScheme } from "./base";

export interface ApplicationApis {
    caseWorkersApi: CaseWorkersApiInterface;
    casesApi: CasesApiInterface;
    exposuresApi: ExposuresApiInterface;
}

/**
 * CaseWorkersApi - object-oriented interface
 */
export interface CaseWorkersApiInterface {
    /**
     *
     * @param {*} [params] Request parameters, including pathParams, queryParams (including bodyParams) and http options.
     * @throws {HttpError}
     * @memberof CaseWorkersApi
     */
    listCaseWorkers(): Promise<CaseWorkerDto>;
    /**
     *
     * @param {*} [params] Request parameters, including pathParams, queryParams (including bodyParams) and http options.
     * @throws {HttpError}
     * @memberof CaseWorkersApi
     */
    registerCaseWorker(params: {
        caseWorkerDto?: CaseWorkerDto;
    }): Promise<void>;
}

/**
 * CaseWorkersApi - object-oriented interface
 */
export class CaseWorkersApi extends BaseAPI implements CaseWorkersApiInterface {
    /**
     *
     * @param {*} [params] Request parameters, including pathParams, queryParams (including bodyParams) and http options.
     * @throws {HttpError}
     */
    public async listCaseWorkers(): Promise<CaseWorkerDto> {
        return await this.GET(
            "/api/caseWorkers",
            {},
            undefined,
            {
            }
        );
    }
    /**
     *
     * @param {*} [params] Request parameters, including pathParams, queryParams (including bodyParams) and http options.
     * @throws {HttpError}
     */
    public async registerCaseWorker(params: {
        caseWorkerDto?: CaseWorkerDto;
    }): Promise<void> {
        return await this.POST(
            "/api/caseWorkers",
            {},
            { body: params.caseWorkerDto, contentType: "application/json" },
            {
            }
        );
    }
}
/**
 * CasesApi - object-oriented interface
 */
export interface CasesApiInterface {
    /**
     *
     * @param {*} [params] Request parameters, including pathParams, queryParams (including bodyParams) and http options.
     * @throws {HttpError}
     * @memberof CasesApi
     */
    getCaseDetails(params: {
        pathParams: { caseId: string };
    }): Promise<InfectionDto>;
    /**
     *
     * @param {*} [params] Request parameters, including pathParams, queryParams (including bodyParams) and http options.
     * @throws {HttpError}
     * @memberof CasesApi
     */
    listCases(): Promise<InfectionDto>;
    /**
     *
     * @param {*} [params] Request parameters, including pathParams, queryParams (including bodyParams) and http options.
     * @throws {HttpError}
     * @memberof CasesApi
     */
    newCase(params: {
        infectionInformationDto?: InfectionInformationDto;
    }): Promise<void>;
    /**
     *
     * @param {*} [params] Request parameters, including pathParams, queryParams (including bodyParams) and http options.
     * @throws {HttpError}
     * @memberof CasesApi
     */
    registerExposure(params: {
        pathParams: { caseId: string };
        exposureDto?: ExposureDto;
    }): Promise<void>;
}

/**
 * CasesApi - object-oriented interface
 */
export class CasesApi extends BaseAPI implements CasesApiInterface {
    /**
     *
     * @param {*} [params] Request parameters, including pathParams, queryParams (including bodyParams) and http options.
     * @throws {HttpError}
     */
    public async getCaseDetails(params: {
        pathParams: { caseId: string };
    }): Promise<InfectionDto> {
        return await this.GET(
            this.path("/api/cases/{caseId}", params.pathParams),
            {},
            undefined,
            {
            }
        );
    }
    /**
     *
     * @param {*} [params] Request parameters, including pathParams, queryParams (including bodyParams) and http options.
     * @throws {HttpError}
     */
    public async listCases(): Promise<InfectionDto> {
        return await this.GET(
            "/api/cases",
            {},
            undefined,
            {
            }
        );
    }
    /**
     *
     * @param {*} [params] Request parameters, including pathParams, queryParams (including bodyParams) and http options.
     * @throws {HttpError}
     */
    public async newCase(params: {
        infectionInformationDto?: InfectionInformationDto;
    }): Promise<void> {
        return await this.POST(
            "/api/cases",
            {},
            { body: params.infectionInformationDto, contentType: "application/json" },
            {
            }
        );
    }
    /**
     *
     * @param {*} [params] Request parameters, including pathParams, queryParams (including bodyParams) and http options.
     * @throws {HttpError}
     */
    public async registerExposure(params: {
        pathParams: { caseId: string };
        exposureDto?: ExposureDto;
    }): Promise<void> {
        return await this.POST(
            this.path("/api/cases/{caseId}/exposures", params.pathParams),
            {},
            { body: params.exposureDto, contentType: "application/json" },
            {
            }
        );
    }
}
/**
 * ExposuresApi - object-oriented interface
 */
export interface ExposuresApiInterface {
    /**
     *
     * @param {*} [params] Request parameters, including pathParams, queryParams (including bodyParams) and http options.
     * @throws {HttpError}
     * @memberof ExposuresApi
     */
    listExposures(): Promise<ExposureDto>;
    /**
     *
     * @param {*} [params] Request parameters, including pathParams, queryParams (including bodyParams) and http options.
     * @throws {HttpError}
     * @memberof ExposuresApi
     */
    updateExposure(params: {
        pathParams: { exposureId: string };
        exposureDto?: ExposureDto;
    }): Promise<void>;
}

/**
 * ExposuresApi - object-oriented interface
 */
export class ExposuresApi extends BaseAPI implements ExposuresApiInterface {
    /**
     *
     * @param {*} [params] Request parameters, including pathParams, queryParams (including bodyParams) and http options.
     * @throws {HttpError}
     */
    public async listExposures(): Promise<ExposureDto> {
        return await this.GET(
            "/api/exposures",
            {},
            undefined,
            {
            }
        );
    }
    /**
     *
     * @param {*} [params] Request parameters, including pathParams, queryParams (including bodyParams) and http options.
     * @throws {HttpError}
     */
    public async updateExposure(params: {
        pathParams: { exposureId: string };
        exposureDto?: ExposureDto;
    }): Promise<void> {
        return await this.PUT(
            this.path("/api/exposures/{exposureId}", params.pathParams),
            {},
            { body: params.exposureDto, contentType: "application/json" },
            {
            }
        );
    }
}

export const servers: Record<string, ApplicationApis> = {
    "current": {
        caseWorkersApi: new CaseWorkersApi("/api"),
        casesApi: new CasesApi("/api"),
        exposuresApi: new ExposuresApi("/api")
    },
    "production": {
        caseWorkersApi: new CaseWorkersApi("https://infectiontracker.example.gov/api"),
        casesApi: new CasesApi("https://infectiontracker.example.gov/api"),
        exposuresApi: new ExposuresApi("https://infectiontracker.example.gov/api")
    }
};

