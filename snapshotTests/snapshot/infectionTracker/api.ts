/**
 * Infection Tracker
 * Infection Tracker - A case management system for tracking the spread of diseases
 *
 * The version of the OpenAPI document: 1.0.0-draft
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import {
        CaseWorkerDto,
        ExposureDto,
        InfectionDto,
        InfectionInformationDto,
} from "./model";

import { BaseAPI } from './base';

/**
 * CaseWorkersApi - object-oriented interface
 */
export interface CaseWorkersApiInterface {
    /**
     * 
     * @param {*} [params] Request parameters, including pathParams, queryParams (including bodyParams) and http options.
     * @throws {HttpError}
     * @memberof CaseWorkersApi
     */
    listCaseWorkers(params?: { 
          options?: any
    }): Promise<CaseWorkerDto>;
    /**
     * 
     * @param {*} [params] Request parameters, including pathParams, queryParams (including bodyParams) and http options.
     * @throws {HttpError}
     * @memberof CaseWorkersApi
     */
    registerCaseWorker(params?: { 
          caseWorkerDto?: CaseWorkerDto,
          options?: any
    }): Promise<void>;
}


/**
 * CaseWorkersApi - object-oriented interface
 */
export class CaseWorkersApi extends BaseAPI implements CaseWorkersApiInterface {
    /**
     * 
     * @param {*} [params] Request parameters, including pathParams, queryParams (including bodyParams) and http options.
     * @throws {HttpError}
     */
    public async listCaseWorkers(params?: { 
          options?: any
    }): Promise<CaseWorkerDto> {
        return await this.GET(
            "/api/caseWorkers",
            {},
            undefined,
            params && params.options,
        );
    }

    /**
     * 
     * @param {*} [params] Request parameters, including pathParams, queryParams (including bodyParams) and http options.
     * @throws {HttpError}
     */
    public async registerCaseWorker(params: { 
          caseWorkerDto?: CaseWorkerDto,
          options?: any
    }): Promise<void> {
        return await this.POST(
            "/api/caseWorkers",
            {},
            { body: params.caseWorkerDto, contentType: "application/json" },
            params && params.options,
        );
    }

}
/**
 * CasesApi - object-oriented interface
 */
export interface CasesApiInterface {
    /**
     * 
     * @param {*} [params] Request parameters, including pathParams, queryParams (including bodyParams) and http options.
     * @throws {HttpError}
     * @memberof CasesApi
     */
    getCaseDetails(params?: { 
          pathParams: { caseId: string,  },
          options?: any
    }): Promise<InfectionDto>;
    /**
     * 
     * @param {*} [params] Request parameters, including pathParams, queryParams (including bodyParams) and http options.
     * @throws {HttpError}
     * @memberof CasesApi
     */
    listCases(params?: { 
          options?: any
    }): Promise<InfectionDto>;
    /**
     * 
     * @param {*} [params] Request parameters, including pathParams, queryParams (including bodyParams) and http options.
     * @throws {HttpError}
     * @memberof CasesApi
     */
    newCase(params?: { 
          infectionInformationDto?: InfectionInformationDto,
          options?: any
    }): Promise<void>;
    /**
     * 
     * @param {*} [params] Request parameters, including pathParams, queryParams (including bodyParams) and http options.
     * @throws {HttpError}
     * @memberof CasesApi
     */
    registerExposure(params?: { 
          pathParams: { caseId: string,  },
          exposureDto?: ExposureDto,
          options?: any
    }): Promise<void>;
}


/**
 * CasesApi - object-oriented interface
 */
export class CasesApi extends BaseAPI implements CasesApiInterface {
    /**
     * 
     * @param {*} [params] Request parameters, including pathParams, queryParams (including bodyParams) and http options.
     * @throws {HttpError}
     */
    public async getCaseDetails(params: { 
          pathParams: { caseId: string,  },
          options?: any
    }): Promise<InfectionDto> {
        return await this.GET(
            this.path("/api/cases/{caseId}", params.pathParams),
            {},
            undefined,
            params && params.options,
        );
    }

    /**
     * 
     * @param {*} [params] Request parameters, including pathParams, queryParams (including bodyParams) and http options.
     * @throws {HttpError}
     */
    public async listCases(params?: { 
          options?: any
    }): Promise<InfectionDto> {
        return await this.GET(
            "/api/cases",
            {},
            undefined,
            params && params.options,
        );
    }

    /**
     * 
     * @param {*} [params] Request parameters, including pathParams, queryParams (including bodyParams) and http options.
     * @throws {HttpError}
     */
    public async newCase(params: { 
          infectionInformationDto?: InfectionInformationDto,
          options?: any
    }): Promise<void> {
        return await this.POST(
            "/api/cases",
            {},
            { body: params.infectionInformationDto, contentType: "application/json" },
            params && params.options,
        );
    }

    /**
     * 
     * @param {*} [params] Request parameters, including pathParams, queryParams (including bodyParams) and http options.
     * @throws {HttpError}
     */
    public async registerExposure(params: { 
          pathParams: { caseId: string,  },
          exposureDto?: ExposureDto,
          options?: any
    }): Promise<void> {
        return await this.POST(
            this.path("/api/cases/{caseId}/exposures", params.pathParams),
            {},
            { body: params.exposureDto, contentType: "application/json" },
            params && params.options,
        );
    }

}
/**
 * ExposuresApi - object-oriented interface
 */
export interface ExposuresApiInterface {
    /**
     * 
     * @param {*} [params] Request parameters, including pathParams, queryParams (including bodyParams) and http options.
     * @throws {HttpError}
     * @memberof ExposuresApi
     */
    listExposures(params?: { 
          options?: any
    }): Promise<ExposureDto>;
    /**
     * 
     * @param {*} [params] Request parameters, including pathParams, queryParams (including bodyParams) and http options.
     * @throws {HttpError}
     * @memberof ExposuresApi
     */
    updateExposure(params?: { 
          pathParams: { exposureId: string,  },
          exposureDto?: ExposureDto,
          options?: any
    }): Promise<void>;
}


/**
 * ExposuresApi - object-oriented interface
 */
export class ExposuresApi extends BaseAPI implements ExposuresApiInterface {
    /**
     * 
     * @param {*} [params] Request parameters, including pathParams, queryParams (including bodyParams) and http options.
     * @throws {HttpError}
     */
    public async listExposures(params?: { 
          options?: any
    }): Promise<ExposureDto> {
        return await this.GET(
            "/api/exposures",
            {},
            undefined,
            params && params.options,
        );
    }

    /**
     * 
     * @param {*} [params] Request parameters, including pathParams, queryParams (including bodyParams) and http options.
     * @throws {HttpError}
     */
    public async updateExposure(params: { 
          pathParams: { exposureId: string,  },
          exposureDto?: ExposureDto,
          options?: any
    }): Promise<void> {
        return await this.PUT(
            this.path("/api/exposures/{exposureId}", params.pathParams),
            {},
            { body: params.exposureDto, contentType: "application/json" },
            params && params.options,
        );
    }

}


